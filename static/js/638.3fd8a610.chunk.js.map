{"version":3,"file":"static/js/638.3fd8a610.chunk.js","mappings":"4NAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAAV,EAEtBC,EAAyB,SAAAF,GACpC,IAAMC,EAAWD,EAAMC,SAASE,MAC1BC,EAASJ,EAAMI,OAAOC,IAC5B,OAAOJ,EAASG,QAAO,SAAAE,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASL,EADR,GAG/B,E,oBCHYM,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXX,GAAWY,EAAAA,EAAAA,IAAYX,GAkB7B,OACE,kBAAMY,SAjBa,SAAAC,GACnBA,EAAEC,iBACF,MAAyBD,EAAEE,OAAOC,SAA1BX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,OAEZlB,EAASmB,OAAS,GAClBnB,EAASoB,MACP,SAAAf,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKe,MAAMd,aAA9C,IAGTe,MAAM,GAAD,OAAIhB,EAAKe,MAAT,8BAELX,GAASa,EAAAA,EAAAA,IAAW,CAAEjB,KAAMA,EAAKe,MAAOH,OAAQA,EAAOG,SACvDP,EAAEE,OAAOQ,QAEZ,EAGC,WACE,mBAAOC,QAAQ,OAAf,kBAEE,kBACEC,KAAK,OACLpB,KAAK,OACLqB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOJ,QAAQ,SAAf,oBAEE,kBACEC,KAAK,MACLpB,KAAK,SACLqB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,2BAGL,EC9CYI,EAAU,SAAC,GAAiB,IAAfzB,EAAc,EAAdA,QAClBK,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,uBAAIN,EAAQC,QACZ,uBAAID,EAAQa,UACZ,mBAAQa,QAAS,kBAAMrB,GAASsB,EAAAA,EAAAA,IAAc3B,EAAQ4B,IAArC,EAAjB,8BAKL,ECPYC,EAAc,WACzB,IAAMxB,GAAWC,EAAAA,EAAAA,MACjB,GAA6BC,EAAAA,EAAAA,IAAYd,GAAjCqC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MACbpC,GAAWY,EAAAA,EAAAA,IAAYX,GAM7B,OAJAoC,EAAAA,EAAAA,YAAU,WACR3B,GAAS4B,EAAAA,EAAAA,MACV,GAAE,CAAC5B,KAGF,iCACE,wBACGV,EAASuC,KAAI,SAAAlC,GACZ,OACE,yBACE,SAACyB,EAAD,CAASzB,QAASA,KADXA,EAAQ4B,GAIpB,MAEFE,IAAa,sCACbC,IAAS,uBAAIA,MAGnB,E,UC9BYI,EAAS,WACpB,IAAM9B,GAAWC,EAAAA,EAAAA,MAQjB,OACE,mBAAOc,QAAQ,SAAf,mCAEE,kBACEC,KAAK,OACLpB,KAAK,SACLqB,QAAQ,0HACRC,MAAM,yIACNa,SAde,SAAA3B,GACnBA,EAAEC,iBACF,IAAMX,EAAMU,EAAEE,OAAOK,MAAMd,cAC3BG,GAASgC,EAAAA,EAAAA,GAAUtC,GACpB,MAcF,E,UCjBc,SAASuC,IACtB,OACE,iCACE,SAAC,KAAD,WACE,2CAEF,uCACA,SAAClC,EAAD,KACA,sCACA,SAAC+B,EAAD,KACA,SAACN,EAAD,KACA,SAAC,EAAAU,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\n\nexport const selectFilteredContacts = state => {\n  const contacts = state.contacts.items;\n  const filter = state.filter.val;\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectFilteredContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = e.target.elements;\n    if (\n      contacts.length > 0 &&\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      alert(`${name.value} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name: name.value, number: number.value }));\n      e.target.reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor=\"number\">\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>{contact.name}</p>\n      <p>{contact.number}</p>\n      <button onClick={() => dispatch(deleteContact(contact.id))}>\n        Delete contact\n      </button>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectFilteredContacts,\n  selectContacts,\n} from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(selectContacts);\n  const contacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ul>\n        {contacts.map(contact => {\n          return (\n            <li key={contact.id}>\n              <Contact contact={contact}></Contact>\n            </li>\n          );\n        })}\n      </ul>\n      {isLoading && <b>Loading...</b>}\n      {error && <b>{error}</b>}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    e.preventDefault();\n    const val = e.target.value.toLowerCase();\n    dispatch(setFilter(val));\n  };\n\n  return (\n    <label htmlFor=\"filter\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$}\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handleChange}\n      />\n    </label>\n  );\n};\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function Contacts() {\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilteredContacts","items","filter","val","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","target","elements","number","length","find","value","alert","addContact","reset","htmlFor","type","pattern","title","required","Contact","onClick","deleteContact","id","ContactList","isLoading","error","useEffect","fetchContacts","map","Filter","onChange","setFilter","Contacts","Suspense","fallback"],"sourceRoot":""}